[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Policy Assignment",
  "enabled": 1,
  "modified": "2025-05-24 10:27:06.379518",
  "module": "Psc Hrms",
  "name": "Set Effective Dates",
  "script": "frappe.ui.form.on('Leave Policy Assignment', {\n    refresh: function(frm) {\n        if (frm.doc.assignment_based_on === \"Current Fiscal Year\") {\n            const currentYear = new Date().getFullYear();\n            const startOfYear = `${currentYear}-01-01`;\n            const endOfYear = `${currentYear}-12-31`;\n\n            frm.set_value(\"effective_from\", startOfYear);\n            frm.set_value(\"effective_to\", endOfYear);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-25 17:18:20.088366",
  "module": "Psc Hrms",
  "name": "Leave Allocation for Staff",
  "script": "frappe.listview_settings['Employee'] = {\n  onload: function(list_view) {\n    // ask server if current user may see the Allocate button\n    frappe.call({\n      method: 'psc_hrms.apis.helpers.user_can_allocate_leave',\n      callback: (r) => {\n        if (!r.message) {\n          // no permission: do nothing\n          return;\n        }\n\n        // user is allowed → add the button\n        list_view.page.add_inner_button(__('Allocate Leave Days'), () => {\n          const dialog = new frappe.ui.Dialog({\n            title: __('Allocate Leave Days'),\n            fields: [\n              { fieldtype: 'Link',      label: __('Staff'),                 fieldname: 'employee',               options: 'Employee',   reqd: 1 },\n              { fieldtype: 'Link',      label: __('Leave Type'),            fieldname: 'leave_type',            options: 'Leave Type', reqd: 1 },\n              { fieldtype: 'Float',     label: __('Leave Days'),            fieldname: 'leave_days',            reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated From Date'),   fieldname: 'from_date',              reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated To Date'),     fieldname: 'to_date',                reqd: 1 },\n              { fieldtype: 'Small Text',label: __('Additional Description'), fieldname: 'additional_description' }\n            ],\n            primary_action_label: __('Create Allocation'),\n            primary_action: function() {\n              frappe.dom.freeze(__('Allocating leave days...'));\n              const args = dialog.get_values(true);\n\n              frappe.call({\n                method: 'psc_hrms.apis.helpers.allocate_leave_days',\n                args: {\n                  employee:               args.employee,\n                  leave_type:             args.leave_type,\n                  leave_days:             args.leave_days,\n                  from_date:              args.from_date,\n                  to_date:                args.to_date,\n                  additional_description: args.additional_description || ''\n                },\n                callback: function(r) {\n                  frappe.dom.unfreeze();\n\n                  // Success\n                  if (!r.exc) {\n                    dialog.hide();\n                    list_view.refresh();\n                    frappe.show_alert({\n                      message: __('Leave Allocation {0} created', [r.message]),\n                      indicator: 'green'\n                    });\n                    return;\n                  }\n\n                  // Overlap Error?\n                  const m = r.exc.match(/Reference:\\s*(HR-LAL-\\d{4}-\\d+)/);\n                  if (m) {\n                    const existingName = m[1];\n                    frappe.db.get_doc('Leave Allocation', existingName)\n                      .then(doc => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: `\n                            <p>\n                              Oops! A Document <b>${doc.name}</b> already exists for <b>${doc.employee}</b><br>\n                              for the period <b>${frappe.format_date(doc.from_date)}</b> to <b>${frappe.format_date(doc.to_date)}</b>.\n                            </p>`,\n                          indicator: 'red'\n                        });\n                      })\n                      .catch(() => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: __('An allocation already exists ({0}), but couldn’t fetch details.', [existingName]),\n                          indicator: 'red'\n                        });\n                      });\n                    return;\n                  }\n\n                  // Other server‐side throw\n                  frappe.msgprint({ title: __('Error'), message: r.exc, indicator: 'red' });\n                },\n                error: function() {\n                  frappe.dom.unfreeze();\n                  frappe.msgprint({\n                    title: __('Network Error'),\n                    message: __('Please try again.'),\n                    indicator: 'red'\n                  });\n                }\n              });\n            }\n          });\n\n          dialog.show();\n          dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n        }).addClass('btn-primary');\n      }\n    });\n  }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2025-07-04 18:26:06.819696",
  "module": "Psc Hrms",
  "name": "Leave Allocation Inner Button",
  "script": "frappe.listview_settings['Leave Allocation'] = {\n  onload: function(list_view) {\n    // Only HODs or HR Managers get to allocate leave\n    if (!(frappe.user.has_role('HOD') || frappe.user.has_role('HR Manager'))) {\n      return;\n    }\n\n    // ask server if current user may see the Allocate button\n    frappe.call({\n      method: 'psc_hrms.apis.helpers.user_can_allocate_leave',\n      callback: (r) => {\n        if (!r.message) {\n          // no permission: do nothing\n          return;\n        }\n\n        // user is allowed → add the button\n        list_view.page.add_inner_button(__('Allocate Leave Days'), () => {\n          const dialog = new frappe.ui.Dialog({\n            title: __('Allocate Leave Days'),\n            fields: [\n              { fieldtype: 'Link',      label: __('Staff'),                 fieldname: 'employee',               options: 'Employee',   reqd: 1 },\n              { fieldtype: 'Link',      label: __('Leave Type'),            fieldname: 'leave_type',            options: 'Leave Type', reqd: 1 },\n              { fieldtype: 'Float',     label: __('Leave Days'),            fieldname: 'leave_days',            reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated From Date'),   fieldname: 'from_date',              reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated To Date'),     fieldname: 'to_date',                reqd: 1 },\n              { fieldtype: 'Small Text',label: __('Additional Description'), fieldname: 'additional_description' }\n            ],\n            primary_action_label: __('Create Allocation'),\n            primary_action: function() {\n              frappe.dom.freeze(__('Allocating leave days...'));\n              const args = dialog.get_values(true);\n\n              frappe.call({\n                method: 'psc_hrms.apis.helpers.allocate_leave_days',\n                args: {\n                  employee:               args.employee,\n                  leave_type:             args.leave_type,\n                  leave_days:             args.leave_days,\n                  from_date:              args.from_date,\n                  to_date:                args.to_date,\n                  additional_description: args.additional_description || ''\n                },\n                callback: function(r) {\n                  frappe.dom.unfreeze();\n\n                  // Success\n                  if (!r.exc) {\n                    dialog.hide();\n                    list_view.refresh();\n                    frappe.show_alert({\n                      message: __('Leave Allocation {0} created', [r.message]),\n                      indicator: 'green'\n                    });\n                    return;\n                  }\n\n                  // Overlap Error?\n                  const m = r.exc.match(/Reference:\\s*(HR-LAL-\\d{4}-\\d+)/);\n                  if (m) {\n                    const existingName = m[1];\n                    frappe.db.get_doc('Leave Allocation', existingName)\n                      .then(doc => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: `\n                            <p>\n                              Oops! A Document <b>${doc.name}</b> already exists for <b>${doc.employee}</b><br>\n                              for the period <b>${frappe.format_date(doc.from_date)}</b> to <b>${frappe.format_date(doc.to_date)}</b>.\n                            </p>`,\n                          indicator: 'red'\n                        });\n                      })\n                      .catch(() => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: __('An allocation already exists ({0}), but couldn’t fetch details.', [existingName]),\n                          indicator: 'red'\n                        });\n                      });\n                    return;\n                  }\n\n                  // Other server‐side throw\n                  frappe.msgprint({ title: __('Error'), message: r.exc, indicator: 'red' });\n                },\n                error: function() {\n                  frappe.dom.unfreeze();\n                  frappe.msgprint({\n                    title: __('Network Error'),\n                    message: __('Please try again.'),\n                    indicator: 'red'\n                  });\n                }\n              });\n            }\n          });\n\n          dialog.show();\n          dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n        }).addClass('btn-primary');\n      }\n    });\n  }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-05-25 18:05:52.423303",
  "module": "Psc Hrms",
  "name": "Filter By dept",
  "script": "frappe.ui.form.on('Leave Application', {\n  // Ensure the query runs as soon as 'department' is known\n  department: function(frm) {\n    frm.set_query('custom_who_is_to_stand_in_place_while_absent', () => {\n      return {\n        filters: {\n          department: frm.doc.department\n        }\n      };\n    });\n\n    // Optional: clear the field when department changes\n    frm.set_value('custom_who_is_to_stand_in_place_while_absent', null);\n  },\n\n  // Also apply query on form load (in case department already set)\n  onload: function(frm) {\n    if (frm.doc.department) {\n      frm.set_query('custom_who_is_to_stand_in_place_while_absent', () => {\n        return {\n          filters: {\n            department: frm.doc.department\n          }\n        };\n      });\n    }\n  },\n\n  // Auto-fill full_name when someone is selected\n  custom_who_is_to_stand_in_place_while_absent: function(frm) {\n    const emp = frm.doc.custom_who_is_to_stand_in_place_while_absent;\n    if (emp) {\n      frappe.db.get_value('Employee', emp, 'first_name')\n        .then(r => {\n          if (r.message && r.message.first_name) {\n            frm.set_value('custom_full_name', r.message.first_name);\n          }\n        });\n    } else {\n      frm.set_value('custom_full_name', '');\n    }\n  }\n});\n",
  "view": "Form"
 }
]