[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-07-05 14:05:40.566059",
  "module": "Psc Hrms",
  "name": "Leave Application by 3rd Party",
  "script": "frappe.listview_settings['Leave Application'] = {\n  onload: function(list_view) {\n    if (!(frappe.user.has_role('HOD') || frappe.user.has_role('HR Manager'))) {\n      return;\n    }\n\n    // Helper to call the server and compute days (including holidays, etc.)\n    function calculate_total_days(employee, leave_type, from_date, to_date, half_day, half_day_date, cb) {\n      if (!from_date || !to_date) {\n        cb && cb(null);\n        return;\n      }\n      frappe.call({\n        method: \"hrms.hr.doctype.leave_application.leave_application.get_number_of_leave_days\",\n        args: { employee, leave_type, from_date, to_date, half_day, half_day_date },\n        callback: function(r) {\n          cb && cb(r && r.message || null);\n        }\n      });\n    }\n\n    list_view.page.add_inner_button(__('Quick Leave Application'), () => {\n      const dialog = new frappe.ui.Dialog({\n        title: __('Create Leave Applications'),\n        fields: [\n          {\n            fieldtype: 'Link',\n            label: __('Select Staff'),\n            fieldname: 'employee',\n            options: 'Employee',\n            reqd: 1,\n            change: () => {\n              const emp = dialog.get_value('employee');\n              if (!emp) return;\n              frappe.db.get_value('Employee', emp, 'employee_name')\n                .then(r => {\n                  dialog.set_value('employee_name', r.message.employee_name);\n                  dialog.fields_dict.employee_name.$wrapper.toggle(true);\n                  update_leave_details();\n                });\n            }\n          },\n          {\n            fieldtype: 'Data',\n            label: __('Staff Name'),\n            fieldname: 'employee_name',\n            read_only: 1,\n            depends_on: \"eval:doc.employee\",\n          },\n          {\n            fieldtype: 'HTML',\n            fieldname: 'leave_dashboard',\n            label: __('Leave Balances')\n          },\n          {\n            fieldtype: 'HTML',\n            fieldname: 'leave_types_section',\n            label: __('Select Leave Types')\n          }\n        ],\n        primary_action_label: __('Create Applications'),\n        primary_action: () => {\n          const employee = dialog.get_value('employee');\n          if (!employee) {\n            frappe.msgprint(__('Please select an employee'));\n            return;\n          }\n\n          // freeze UI\n          frappe.dom.freeze(__('Creating leave applications...'));\n\n          const applications = [];\n          let hasErrors = false;\n\n          Object.entries(dialog.leave_mapping).forEach(([safe, original]) => {\n            const $cb = dialog.fields_dict.leave_types_section.$wrapper.find(`#cb_${safe}`);\n            if ($cb.is(':checked')) {\n              const from_date = $(`#from_date_${safe}`).val();\n              const to_date   = $(`#to_date_${safe}`).val();\n\n              if (!from_date || !to_date) {\n                frappe.msgprint(__('Please set dates for {0}', [original]));\n                hasErrors = true;\n                return;\n              }\n              if (frappe.datetime.str_to_obj(to_date) < frappe.datetime.str_to_obj(from_date)) {\n                frappe.msgprint(__('To Date cannot be before From Date for {0}', [original]));\n                hasErrors = true;\n                return;\n              }\n\n              applications.push({ leave_type: original, from_date, to_date });\n            }\n          });\n\n          if (hasErrors) {\n            frappe.dom.unfreeze();\n            return;\n          }\n          if (applications.length === 0) {\n            frappe.dom.unfreeze();\n            frappe.msgprint(__('Please select at least one leave type'));\n            return;\n          }\n\n          frappe.call({\n            method: 'psc_hrms.apis.helpers.create_leave_applications',\n            args: { employee, applications },\n            callback: r => {\n              frappe.dom.unfreeze();\n              if (!r.exc) {\n                dialog.hide();\n                list_view.refresh();\n                frappe.show_alert({\n                  message: __('{0} Leave Application(s) created', [r.message.length]),\n                  indicator: 'green'\n                });\n              }\n            },\n            error: () => {\n              frappe.dom.unfreeze();\n              frappe.msgprint(__('An error occurred. Please try again.'));\n            }\n          });\n        }\n      });\n\n      function update_leave_details() {\n        const emp = dialog.get_value('employee');\n        if (!emp) return;\n\n        frappe.call({\n          method: \"hrms.hr.doctype.leave_application.leave_application.get_leave_details\",\n          args: { employee: emp, date: frappe.datetime.nowdate() },\n          callback: r => {\n            if (r.exc) return;\n            const details = r.message.leave_allocation || {};\n            const lwps    = r.message.lwps || [];\n            let allowed = Object.keys(details).concat(lwps).filter(lt => lt !== 'Leave Without Pay');\n\n            dialog.leave_mapping = {};\n            allowed.forEach(lt => {\n              const safe = lt.replace(/[^A-Za-z0-9_]/g, '_');\n              dialog.leave_mapping[safe] = lt;\n            });\n\n            dialog.fields_dict.leave_dashboard.$wrapper.html(\n              frappe.render_template(\"leave_application_dashboard\", { data: details })\n            );\n\n            // Build the checkbox + date HTML with inline styles + days count\n            let html = `<div class=\"form-group\">\n                          <label class=\"control-label\">\n                            ${__('Select Leave Types to Apply')}\n                          </label>\n                          <div class=\"clearfix\"></div>`;\n\n            allowed.forEach(lt => {\n              const safe = lt.replace(/[^A-Za-z0-9_]/g, '_');\n              html += `\n                <div class=\"checkbox\" style=\"margin-bottom: 1em;\">\n                  <label style=\"font-size: 1.1em; user-select: none;\">\n                    <input type=\"checkbox\" id=\"cb_${safe}\"\n                           style=\"transform: scale(1.4); margin-right: 0.6em;\">\n                    ${lt}\n                  </label>\n                </div>\n                <div id=\"date_fields_${safe}\" style=\"display:none; margin-left:20px;\">\n                  <div class=\"row\">\n                    <div class=\"col-sm-4\">\n                      <label>${__('From Date')}</label>\n                      <input type=\"date\" class=\"form-control\"\n                             id=\"from_date_${safe}\"\n                             style=\"padding: 0.6em; font-size:1.05em;\">\n                    </div>\n                    <div class=\"col-sm-4\">\n                      <label>${__('To Date')}</label>\n                      <input type=\"date\" class=\"form-control\"\n                             id=\"to_date_${safe}\"\n                             style=\"padding: 0.6em; font-size:1.05em;\">\n                    </div>\n                    <div class=\"col-sm-2.5\">\n                      <label>${__('Total Leave Days')}</label>\n                      <input type=\"number\" class=\"form-control\" id=\"days_count_${safe}\"\n                             readonly style=\"padding: 0.6em; font-size:1.05em;\"/>\n                    </div>\n                  </div>\n                </div>`;\n            });\n            html += `</div>`;\n            dialog.fields_dict.leave_types_section.$wrapper.html(html);\n\n            // Attach handlers\n            Object.entries(dialog.leave_mapping).forEach(([safe, original]) => {\n              const cb = $(`#cb_${safe}`);\n              const fromInput = $(`#from_date_${safe}`);\n              const toInput   = $(`#to_date_${safe}`);\n              const daysInput = $(`#days_count_${safe}`);\n\n              // Toggle date‐fields\n              cb.on('change', () => {\n                const show = cb.is(':checked');\n                $(`#date_fields_${safe}`).toggle(show);\n                if (show) {\n                  fromInput.val(frappe.datetime.nowdate());\n                  toInput.val('');\n                  daysInput.val('');\n                }\n              });\n\n              // When either date changes, recalc days\n              fromInput.add(toInput).on('change', () => {\n                // clear days if invalid\n                const fromVal = fromInput.val(),\n                      toVal   = toInput.val();\n                if (fromVal && toVal && frappe.datetime.str_to_obj(toVal) < frappe.datetime.str_to_obj(fromVal)) {\n                  frappe.msgprint(__('To Date cannot be before From Date'));\n                  toInput.val('');\n                  daysInput.val('');\n                  return;\n                }\n\n                const emp = dialog.get_value('employee'),\n                      half_day = dialog.get_value('half_day'),\n                      half_day_date = dialog.get_value('half_day_date');\n\n                calculate_total_days(emp, original, fromVal, toVal, half_day, half_day_date, (days) => {\n                  daysInput.val(days || 0);\n                });\n              });\n            });\n          }\n        });\n      }\n\n      dialog.show();\n      dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n    }).addClass('btn-primary');\n  }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Policy Assignment",
  "enabled": 1,
  "modified": "2025-05-24 10:27:06.379518",
  "module": "Psc Hrms",
  "name": "Set Effective Dates",
  "script": "frappe.ui.form.on('Leave Policy Assignment', {\n    refresh: function(frm) {\n        if (frm.doc.assignment_based_on === \"Current Fiscal Year\") {\n            const currentYear = new Date().getFullYear();\n            const startOfYear = `${currentYear}-01-01`;\n            const endOfYear = `${currentYear}-12-31`;\n\n            frm.set_value(\"effective_from\", startOfYear);\n            frm.set_value(\"effective_to\", endOfYear);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-05-25 17:18:20.088366",
  "module": "Psc Hrms",
  "name": "Leave Allocation for Staff",
  "script": "frappe.listview_settings['Employee'] = {\n  onload: function(list_view) {\n    // ask server if current user may see the Allocate button\n    frappe.call({\n      method: 'psc_hrms.apis.helpers.user_can_allocate_leave',\n      callback: (r) => {\n        if (!r.message) {\n          // no permission: do nothing\n          return;\n        }\n\n        // user is allowed → add the button\n        list_view.page.add_inner_button(__('Allocate Leave Days'), () => {\n          const dialog = new frappe.ui.Dialog({\n            title: __('Allocate Leave Days'),\n            fields: [\n              { fieldtype: 'Link',      label: __('Staff'),                 fieldname: 'employee',               options: 'Employee',   reqd: 1 },\n              { fieldtype: 'Link',      label: __('Leave Type'),            fieldname: 'leave_type',            options: 'Leave Type', reqd: 1 },\n              { fieldtype: 'Float',     label: __('Leave Days'),            fieldname: 'leave_days',            reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated From Date'),   fieldname: 'from_date',              reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated To Date'),     fieldname: 'to_date',                reqd: 1 },\n              { fieldtype: 'Small Text',label: __('Additional Description'), fieldname: 'additional_description' }\n            ],\n            primary_action_label: __('Create Allocation'),\n            primary_action: function() {\n              frappe.dom.freeze(__('Allocating leave days...'));\n              const args = dialog.get_values(true);\n\n              frappe.call({\n                method: 'psc_hrms.apis.helpers.allocate_leave_days',\n                args: {\n                  employee:               args.employee,\n                  leave_type:             args.leave_type,\n                  leave_days:             args.leave_days,\n                  from_date:              args.from_date,\n                  to_date:                args.to_date,\n                  additional_description: args.additional_description || ''\n                },\n                callback: function(r) {\n                  frappe.dom.unfreeze();\n\n                  // Success\n                  if (!r.exc) {\n                    dialog.hide();\n                    list_view.refresh();\n                    frappe.show_alert({\n                      message: __('Leave Allocation {0} created', [r.message]),\n                      indicator: 'green'\n                    });\n                    return;\n                  }\n\n                  // Overlap Error?\n                  const m = r.exc.match(/Reference:\\s*(HR-LAL-\\d{4}-\\d+)/);\n                  if (m) {\n                    const existingName = m[1];\n                    frappe.db.get_doc('Leave Allocation', existingName)\n                      .then(doc => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: `\n                            <p>\n                              Oops! A Document <b>${doc.name}</b> already exists for <b>${doc.employee}</b><br>\n                              for the period <b>${frappe.format_date(doc.from_date)}</b> to <b>${frappe.format_date(doc.to_date)}</b>.\n                            </p>`,\n                          indicator: 'red'\n                        });\n                      })\n                      .catch(() => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: __('An allocation already exists ({0}), but couldn’t fetch details.', [existingName]),\n                          indicator: 'red'\n                        });\n                      });\n                    return;\n                  }\n\n                  // Other server‐side throw\n                  frappe.msgprint({ title: __('Error'), message: r.exc, indicator: 'red' });\n                },\n                error: function() {\n                  frappe.dom.unfreeze();\n                  frappe.msgprint({\n                    title: __('Network Error'),\n                    message: __('Please try again.'),\n                    indicator: 'red'\n                  });\n                }\n              });\n            }\n          });\n\n          dialog.show();\n          dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n        }).addClass('btn-primary');\n      }\n    });\n  }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2025-07-04 18:26:06.819696",
  "module": "Psc Hrms",
  "name": "Leave Allocation Inner Button",
  "script": "frappe.listview_settings['Leave Allocation'] = {\n  onload: function(list_view) {\n    // Only HODs or HR Managers get to allocate leave\n    if (!(frappe.user.has_role('HOD') || frappe.user.has_role('HR Manager'))) {\n      return;\n    }\n\n    // ask server if current user may see the Allocate button\n    frappe.call({\n      method: 'psc_hrms.apis.helpers.user_can_allocate_leave',\n      callback: (r) => {\n        if (!r.message) {\n          // no permission: do nothing\n          return;\n        }\n\n        // user is allowed → add the button\n        list_view.page.add_inner_button(__('Allocate Leave Days'), () => {\n          const dialog = new frappe.ui.Dialog({\n            title: __('Allocate Leave Days'),\n            fields: [\n              { fieldtype: 'Link',      label: __('Staff'),                 fieldname: 'employee',               options: 'Employee',   reqd: 1 },\n              { fieldtype: 'Link',      label: __('Leave Type'),            fieldname: 'leave_type',            options: 'Leave Type', reqd: 1 },\n              { fieldtype: 'Float',     label: __('Leave Days'),            fieldname: 'leave_days',            reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated From Date'),   fieldname: 'from_date',              reqd: 1 },\n              { fieldtype: 'Date',      label: __('Allocated To Date'),     fieldname: 'to_date',                reqd: 1 },\n              { fieldtype: 'Small Text',label: __('Additional Description'), fieldname: 'additional_description' }\n            ],\n            primary_action_label: __('Create Allocation'),\n            primary_action: function() {\n              frappe.dom.freeze(__('Allocating leave days...'));\n              const args = dialog.get_values(true);\n\n              frappe.call({\n                method: 'psc_hrms.apis.helpers.allocate_leave_days',\n                args: {\n                  employee:               args.employee,\n                  leave_type:             args.leave_type,\n                  leave_days:             args.leave_days,\n                  from_date:              args.from_date,\n                  to_date:                args.to_date,\n                  additional_description: args.additional_description || ''\n                },\n                callback: function(r) {\n                  frappe.dom.unfreeze();\n\n                  // Success\n                  if (!r.exc) {\n                    dialog.hide();\n                    list_view.refresh();\n                    frappe.show_alert({\n                      message: __('Leave Allocation {0} created', [r.message]),\n                      indicator: 'green'\n                    });\n                    return;\n                  }\n\n                  // Overlap Error?\n                  const m = r.exc.match(/Reference:\\s*(HR-LAL-\\d{4}-\\d+)/);\n                  if (m) {\n                    const existingName = m[1];\n                    frappe.db.get_doc('Leave Allocation', existingName)\n                      .then(doc => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: `\n                            <p>\n                              Oops! A Document <b>${doc.name}</b> already exists for <b>${doc.employee}</b><br>\n                              for the period <b>${frappe.format_date(doc.from_date)}</b> to <b>${frappe.format_date(doc.to_date)}</b>.\n                            </p>`,\n                          indicator: 'red'\n                        });\n                      })\n                      .catch(() => {\n                        frappe.msgprint({\n                          title: __('Leave Allocation Exists'),\n                          message: __('An allocation already exists ({0}), but couldn’t fetch details.', [existingName]),\n                          indicator: 'red'\n                        });\n                      });\n                    return;\n                  }\n\n                  // Other server‐side throw\n                  frappe.msgprint({ title: __('Error'), message: r.exc, indicator: 'red' });\n                },\n                error: function() {\n                  frappe.dom.unfreeze();\n                  frappe.msgprint({\n                    title: __('Network Error'),\n                    message: __('Please try again.'),\n                    indicator: 'red'\n                  });\n                }\n              });\n            }\n          });\n\n          dialog.show();\n          dialog.$wrapper.find('.modal-dialog').addClass('modal-lg');\n        }).addClass('btn-primary');\n      }\n    });\n  }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2025-05-25 18:05:52.423303",
  "module": "Psc Hrms",
  "name": "Filter By dept",
  "script": "frappe.ui.form.on('Leave Application', {\n  // Ensure the query runs as soon as 'department' is known\n  department: function(frm) {\n    frm.set_query('custom_who_is_to_stand_in_place_while_absent', () => {\n      return {\n        filters: {\n          department: frm.doc.department\n        }\n      };\n    });\n\n    // Optional: clear the field when department changes\n    frm.set_value('custom_who_is_to_stand_in_place_while_absent', null);\n  },\n\n  // Also apply query on form load (in case department already set)\n  onload: function(frm) {\n    if (frm.doc.department) {\n      frm.set_query('custom_who_is_to_stand_in_place_while_absent', () => {\n        return {\n          filters: {\n            department: frm.doc.department\n          }\n        };\n      });\n    }\n  },\n\n  // Auto-fill full_name when someone is selected\n  custom_who_is_to_stand_in_place_while_absent: function(frm) {\n    const emp = frm.doc.custom_who_is_to_stand_in_place_while_absent;\n    if (emp) {\n      frappe.db.get_value('Employee', emp, 'first_name')\n        .then(r => {\n          if (r.message && r.message.first_name) {\n            frm.set_value('custom_full_name', r.message.first_name);\n          }\n        });\n    } else {\n      frm.set_value('custom_full_name', '');\n    }\n  }\n});\n",
  "view": "Form"
 }
]